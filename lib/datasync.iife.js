
/*!
 * ============================================================
 *  Project:   datasync.js
 *  Version:   1.0.0
 *  Homepage:  https://github.com/lamlib/datasync
 *
 *  Description:
 *    Datasync giúp bạn xử lý đồng bộ dữ liệu giữa máy chủ và client.
 *
 *  Author:    Nhat Han <lamlib2023@gmail.com>
 *  License:   MIT License
 *  Copyright: © 2025 Nhat Han
 *
 *  Created:   2025-05-26
 * ============================================================
 */
var DataSync=(()=>{var P=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var U=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var E=(t,n)=>{for(var e in n)P(t,e,{get:n[e],enumerable:!0})},T=(t,n,e,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of U(n))!b.call(t,s)&&s!==e&&P(t,s,{get:()=>n[s],enumerable:!(r=S(n,s))||r.enumerable});return t};var j=t=>T(P({},"__esModule",{value:!0}),t);var Q={};E(Q,{dataStore:()=>y,hasError:()=>H,interceptors:()=>i,loadingHooks:()=>u,messageState:()=>d,paramCache:()=>w,registerDeleteEndpoint:()=>q,registerGetEndpoint:()=>A,registerPatchEndpoint:()=>L,registerPostEndpoint:()=>D,registerPutEndpoint:()=>v,requestHandlers:()=>p,setLoadingHooks:()=>O});var y=new Map,w=new Map,m=0,u={onQueueEmpty:null,onQueueAdd:null},d={error:null,success:null},H=()=>!!d.error,O=({onQueueAdd:t,onQueueEmpty:n})=>{t&&n?(u.onQueueAdd=t,u.onQueueEmpty=n):console.warn("\u26A0\uFE0F DataSync: Missing loading hooks. Use setLoadingHooks() to register.")},C=(t,n)=>{if(!w.has(t))return!1;let e=w.get(t);return e.length!==n.length?!1:e.every((r,s)=>r===n[s])},g=async(t,n,e)=>{d.error=null,d.success=null;try{if(e){if(C(n,e)){console.warn("\u26A0\uFE0F DataSync: Using cached data, skipping request.");return}w.set(n,e)}let s=setTimeout(()=>{m++,u.onQueueAdd&&u.onQueueAdd()},600);y.set(n,null);let o=await t();clearTimeout(s);let a=await o.json();if(i.after&&i.after(a),a.code&&a.code!=="SUCCESS"||a.result===!1||!o.ok)throw new Error(a.message);let c=a.data||a.result;return y.set(n,c),a.message&&(d.success=a.message),c}catch(r){d.error=r,console.log(r)}finally{m>0&&m--,m===0&&u.onQueueEmpty&&u.onQueueEmpty()}},p={},i={before:null,after:null},h=(t,n={})=>{let e=t,r={...n},s=t.match(/:(\w+)/g);return s&&s.forEach(o=>{let a=o.substring(1);r[a]!==void 0&&(e=e.replace(o,r[a]),delete r[a])}),{finalUrl:e,remainingParams:r}},A=(t,n,e)=>{Object.defineProperty(p,t,{value:async r=>await g(async()=>{let s=new Headers;i.before&&await i.before({params:r,headers:s,type:"GET"});let{finalUrl:o,remainingParams:a}=h(n,r),c=new URLSearchParams(a),l=c.toString()?"?"+c.toString():"";return await fetch(o+l,{headers:s})},t,e==="no-cache"?!1:Object.values(r||{})),writable:!1})},D=(t,n)=>{Object.defineProperty(p,t,{value:async(e,r)=>await g(async()=>{let s=new Headers;i.before&&await i.before({body:e,params:r,headers:s,type:"POST"});let{finalUrl:o,remainingParams:a}=h(n,r),c=new URLSearchParams(a),l=c.toString()?"?"+c.toString():"",f=o+l;return e instanceof FormData?await fetch(f,{method:"POST",body:e,headers:s}):(s.append("Accept","application/json"),s.append("Content-Type","application/json"),fetch(f,{method:"POST",body:JSON.stringify(e),headers:s}))},t,!1),writable:!1})},L=(t,n)=>{Object.defineProperty(p,t,{value:async(e,r)=>await g(async()=>{let{finalUrl:s,remainingParams:o}=h(n,r),a=new Headers;i.before&&await i.before({body:e,params:r,headers:a,type:"PATCH"});let c=new URLSearchParams(o),l=c.toString()?"?"+c.toString():"",f=s+l;return e instanceof FormData?await fetch(f,{method:"PATCH",body:e,headers:a}):(a.append("Accept","application/json"),a.append("Content-Type","application/json"),fetch(f,{method:"PATCH",body:JSON.stringify(e),headers:a}))},t,!1),writable:!1})},q=(t,n)=>{Object.defineProperty(p,t,{value:async e=>await g(async()=>{let{finalUrl:r,remainingParams:s}=h(n,e),o=new Headers;i.before&&await i.before({params:e,headers:o,type:"DELETE"});let a=new URLSearchParams(s),c=a.toString()?"?"+a.toString():"",l=r+c;return await fetch(l,{method:"DELETE",headers:o})},t,!1),writable:!1})},v=(t,n)=>{Object.defineProperty(p,t,{value:async(e,r)=>await g(async()=>{let{finalUrl:s,remainingParams:o}=h(n,r),a=new Headers;i.before&&await i.before({body:e,params:r,headers:a,type:"PUT"});let c=new URLSearchParams(o),l=c.toString()?"?"+c.toString():"",f=s+l;return e instanceof FormData?await fetch(f,{method:"PUT",body:e,headers:a}):(a.append("Accept","application/json"),a.append("Content-Type","application/json"),fetch(f,{method:"PUT",body:JSON.stringify(e),headers:a}))},t,!1),writable:!1})};return j(Q);})();
